/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface SurveyInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "createQuestion"
      | "getQuestionCount"
      | "getQuestionStats"
      | "questions"
      | "submitResponse"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "QuestionCreated" | "ResponseSubmitted"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createQuestion",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "getQuestionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getQuestionStats",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "questions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "submitResponse",
    values: [BigNumberish, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createQuestion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuestionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getQuestionStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "questions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "submitResponse",
    data: BytesLike
  ): Result;
}

export namespace QuestionCreatedEvent {
  export type InputTuple = [index: BigNumberish, text: string];
  export type OutputTuple = [index: bigint, text: string];
  export interface OutputObject {
    index: bigint;
    text: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ResponseSubmittedEvent {
  export type InputTuple = [
    index: BigNumberish,
    responder: AddressLike,
    score: BigNumberish
  ];
  export type OutputTuple = [index: bigint, responder: string, score: bigint];
  export interface OutputObject {
    index: bigint;
    responder: string;
    score: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface Survey extends BaseContract {
  connect(runner?: ContractRunner | null): Survey;
  waitForDeployment(): Promise<this>;

  interface: SurveyInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  createQuestion: TypedContractMethod<[_text: string], [void], "nonpayable">;

  getQuestionCount: TypedContractMethod<[], [bigint], "view">;

  getQuestionStats: TypedContractMethod<
    [_index: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint] & {
        text: string;
        totalResponses: bigint;
        average: bigint;
        highest: bigint;
        lowest: bigint;
      }
    ],
    "view"
  >;

  questions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, boolean] & {
        text: string;
        totalResponses: bigint;
        totalScore: bigint;
        highest: bigint;
        lowest: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  submitResponse: TypedContractMethod<
    [_index: BigNumberish, _score: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createQuestion"
  ): TypedContractMethod<[_text: string], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getQuestionCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getQuestionStats"
  ): TypedContractMethod<
    [_index: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint] & {
        text: string;
        totalResponses: bigint;
        average: bigint;
        highest: bigint;
        lowest: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "questions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, bigint, bigint, bigint, bigint, boolean] & {
        text: string;
        totalResponses: bigint;
        totalScore: bigint;
        highest: bigint;
        lowest: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "submitResponse"
  ): TypedContractMethod<
    [_index: BigNumberish, _score: BigNumberish],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "QuestionCreated"
  ): TypedContractEvent<
    QuestionCreatedEvent.InputTuple,
    QuestionCreatedEvent.OutputTuple,
    QuestionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "ResponseSubmitted"
  ): TypedContractEvent<
    ResponseSubmittedEvent.InputTuple,
    ResponseSubmittedEvent.OutputTuple,
    ResponseSubmittedEvent.OutputObject
  >;

  filters: {
    "QuestionCreated(uint256,string)": TypedContractEvent<
      QuestionCreatedEvent.InputTuple,
      QuestionCreatedEvent.OutputTuple,
      QuestionCreatedEvent.OutputObject
    >;
    QuestionCreated: TypedContractEvent<
      QuestionCreatedEvent.InputTuple,
      QuestionCreatedEvent.OutputTuple,
      QuestionCreatedEvent.OutputObject
    >;

    "ResponseSubmitted(uint256,address,uint8)": TypedContractEvent<
      ResponseSubmittedEvent.InputTuple,
      ResponseSubmittedEvent.OutputTuple,
      ResponseSubmittedEvent.OutputObject
    >;
    ResponseSubmitted: TypedContractEvent<
      ResponseSubmittedEvent.InputTuple,
      ResponseSubmittedEvent.OutputTuple,
      ResponseSubmittedEvent.OutputObject
    >;
  };
}
