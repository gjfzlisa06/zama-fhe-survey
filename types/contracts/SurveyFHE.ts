/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "../common";

export interface SurveyFHEInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "admin"
      | "createEncryptedQuestion"
      | "decrypter"
      | "getEncryptedQuestionCount"
      | "getEncryptedQuestionStats"
      | "getPlainStats"
      | "plainStats"
      | "protocolId"
      | "publishPlainStats"
      | "questions"
      | "setDecrypter"
      | "submitEncryptedResponse"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "DecrypterChanged"
      | "EncryptedQuestionCreated"
      | "EncryptedResponseSubmitted"
      | "PlainStatsPublished"
  ): EventFragment;

  encodeFunctionData(functionFragment: "admin", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "createEncryptedQuestion",
    values: [string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "decrypter", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getEncryptedQuestionCount",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getEncryptedQuestionStats",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getPlainStats",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "plainStats",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "protocolId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "publishPlainStats",
    values: [
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "questions",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setDecrypter",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "submitEncryptedResponse",
    values: [BigNumberish, BytesLike, BytesLike, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(functionFragment: "admin", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createEncryptedQuestion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decrypter", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedQuestionCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getEncryptedQuestionStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPlainStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "plainStats", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "protocolId", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "publishPlainStats",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "questions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setDecrypter",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "submitEncryptedResponse",
    data: BytesLike
  ): Result;
}

export namespace DecrypterChangedEvent {
  export type InputTuple = [
    oldDecrypter: AddressLike,
    newDecrypter: AddressLike
  ];
  export type OutputTuple = [oldDecrypter: string, newDecrypter: string];
  export interface OutputObject {
    oldDecrypter: string;
    newDecrypter: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EncryptedQuestionCreatedEvent {
  export type InputTuple = [index: BigNumberish, text: string];
  export type OutputTuple = [index: bigint, text: string];
  export interface OutputObject {
    index: bigint;
    text: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace EncryptedResponseSubmittedEvent {
  export type InputTuple = [index: BigNumberish, sender: AddressLike];
  export type OutputTuple = [index: bigint, sender: string];
  export interface OutputObject {
    index: bigint;
    sender: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace PlainStatsPublishedEvent {
  export type InputTuple = [
    index: BigNumberish,
    totalResponses: BigNumberish,
    sum: BigNumberish,
    average: BigNumberish,
    highest: BigNumberish,
    lowest: BigNumberish
  ];
  export type OutputTuple = [
    index: bigint,
    totalResponses: bigint,
    sum: bigint,
    average: bigint,
    highest: bigint,
    lowest: bigint
  ];
  export interface OutputObject {
    index: bigint;
    totalResponses: bigint;
    sum: bigint;
    average: bigint;
    highest: bigint;
    lowest: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SurveyFHE extends BaseContract {
  connect(runner?: ContractRunner | null): SurveyFHE;
  waitForDeployment(): Promise<this>;

  interface: SurveyFHEInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  admin: TypedContractMethod<[], [string], "view">;

  createEncryptedQuestion: TypedContractMethod<
    [_text: string, _initialLowest: BytesLike, _proof: BytesLike],
    [void],
    "nonpayable"
  >;

  decrypter: TypedContractMethod<[], [string], "view">;

  getEncryptedQuestionCount: TypedContractMethod<[], [bigint], "view">;

  getEncryptedQuestionStats: TypedContractMethod<
    [_index: BigNumberish],
    [
      [string, string, string, string, string] & {
        text: string;
        total: string;
        sum: string;
        highest: string;
        lowest: string;
      }
    ],
    "view"
  >;

  getPlainStats: TypedContractMethod<
    [_index: BigNumberish],
    [
      [boolean, bigint, bigint, bigint, bigint, bigint] & {
        exists: boolean;
        totalResponses: bigint;
        sum: bigint;
        average: bigint;
        highest: bigint;
        lowest: bigint;
      }
    ],
    "view"
  >;

  plainStats: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean] & {
        totalResponses: bigint;
        sum: bigint;
        average: bigint;
        highest: bigint;
        lowest: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;

  protocolId: TypedContractMethod<[], [bigint], "view">;

  publishPlainStats: TypedContractMethod<
    [
      _index: BigNumberish,
      _totalResponses: BigNumberish,
      _sum: BigNumberish,
      _average: BigNumberish,
      _highest: BigNumberish,
      _lowest: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  questions: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, string, boolean] & {
        text: string;
        total: string;
        sum: string;
        highest: string;
        lowest: string;
        exists: boolean;
      }
    ],
    "view"
  >;

  setDecrypter: TypedContractMethod<
    [_decrypter: AddressLike],
    [void],
    "nonpayable"
  >;

  submitEncryptedResponse: TypedContractMethod<
    [
      _index: BigNumberish,
      _encScore: BytesLike,
      _scoreProof: BytesLike,
      _encOne: BytesLike,
      _oneProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "admin"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "createEncryptedQuestion"
  ): TypedContractMethod<
    [_text: string, _initialLowest: BytesLike, _proof: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "decrypter"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getEncryptedQuestionCount"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getEncryptedQuestionStats"
  ): TypedContractMethod<
    [_index: BigNumberish],
    [
      [string, string, string, string, string] & {
        text: string;
        total: string;
        sum: string;
        highest: string;
        lowest: string;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "getPlainStats"
  ): TypedContractMethod<
    [_index: BigNumberish],
    [
      [boolean, bigint, bigint, bigint, bigint, bigint] & {
        exists: boolean;
        totalResponses: bigint;
        sum: bigint;
        average: bigint;
        highest: bigint;
        lowest: bigint;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "plainStats"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [bigint, bigint, bigint, bigint, bigint, boolean] & {
        totalResponses: bigint;
        sum: bigint;
        average: bigint;
        highest: bigint;
        lowest: bigint;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "protocolId"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "publishPlainStats"
  ): TypedContractMethod<
    [
      _index: BigNumberish,
      _totalResponses: BigNumberish,
      _sum: BigNumberish,
      _average: BigNumberish,
      _highest: BigNumberish,
      _lowest: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "questions"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, string, boolean] & {
        text: string;
        total: string;
        sum: string;
        highest: string;
        lowest: string;
        exists: boolean;
      }
    ],
    "view"
  >;
  getFunction(
    nameOrSignature: "setDecrypter"
  ): TypedContractMethod<[_decrypter: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "submitEncryptedResponse"
  ): TypedContractMethod<
    [
      _index: BigNumberish,
      _encScore: BytesLike,
      _scoreProof: BytesLike,
      _encOne: BytesLike,
      _oneProof: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  getEvent(
    key: "DecrypterChanged"
  ): TypedContractEvent<
    DecrypterChangedEvent.InputTuple,
    DecrypterChangedEvent.OutputTuple,
    DecrypterChangedEvent.OutputObject
  >;
  getEvent(
    key: "EncryptedQuestionCreated"
  ): TypedContractEvent<
    EncryptedQuestionCreatedEvent.InputTuple,
    EncryptedQuestionCreatedEvent.OutputTuple,
    EncryptedQuestionCreatedEvent.OutputObject
  >;
  getEvent(
    key: "EncryptedResponseSubmitted"
  ): TypedContractEvent<
    EncryptedResponseSubmittedEvent.InputTuple,
    EncryptedResponseSubmittedEvent.OutputTuple,
    EncryptedResponseSubmittedEvent.OutputObject
  >;
  getEvent(
    key: "PlainStatsPublished"
  ): TypedContractEvent<
    PlainStatsPublishedEvent.InputTuple,
    PlainStatsPublishedEvent.OutputTuple,
    PlainStatsPublishedEvent.OutputObject
  >;

  filters: {
    "DecrypterChanged(address,address)": TypedContractEvent<
      DecrypterChangedEvent.InputTuple,
      DecrypterChangedEvent.OutputTuple,
      DecrypterChangedEvent.OutputObject
    >;
    DecrypterChanged: TypedContractEvent<
      DecrypterChangedEvent.InputTuple,
      DecrypterChangedEvent.OutputTuple,
      DecrypterChangedEvent.OutputObject
    >;

    "EncryptedQuestionCreated(uint256,string)": TypedContractEvent<
      EncryptedQuestionCreatedEvent.InputTuple,
      EncryptedQuestionCreatedEvent.OutputTuple,
      EncryptedQuestionCreatedEvent.OutputObject
    >;
    EncryptedQuestionCreated: TypedContractEvent<
      EncryptedQuestionCreatedEvent.InputTuple,
      EncryptedQuestionCreatedEvent.OutputTuple,
      EncryptedQuestionCreatedEvent.OutputObject
    >;

    "EncryptedResponseSubmitted(uint256,address)": TypedContractEvent<
      EncryptedResponseSubmittedEvent.InputTuple,
      EncryptedResponseSubmittedEvent.OutputTuple,
      EncryptedResponseSubmittedEvent.OutputObject
    >;
    EncryptedResponseSubmitted: TypedContractEvent<
      EncryptedResponseSubmittedEvent.InputTuple,
      EncryptedResponseSubmittedEvent.OutputTuple,
      EncryptedResponseSubmittedEvent.OutputObject
    >;

    "PlainStatsPublished(uint256,uint32,uint32,uint32,uint8,uint8)": TypedContractEvent<
      PlainStatsPublishedEvent.InputTuple,
      PlainStatsPublishedEvent.OutputTuple,
      PlainStatsPublishedEvent.OutputObject
    >;
    PlainStatsPublished: TypedContractEvent<
      PlainStatsPublishedEvent.InputTuple,
      PlainStatsPublishedEvent.OutputTuple,
      PlainStatsPublishedEvent.OutputObject
    >;
  };
}
